View : saving the data

View :

@{
    ViewData["Title"] = "Medication Administration";
    Layout = "_LayoutNurse";
}

@model DEMO.ViewModels.PrescriptionListViewModal
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Medication Administration</title>
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.21/css/jquery.dataTables.min.css">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.5.1.js"></script>
    <script src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <style>
        .container {
            padding-top: 50px;
        }

        .active-tab {
            background-color: teal;
            color: white;
        }

        .form-card {
            max-width: 900px;
            margin: 20px auto;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 10px;
            background-color: #f9f9f9;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .form-group {
            margin-bottom: 30px;
        }

        .row-two-columns {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
        }

            .row-two-columns .vital-group {
                flex: 1 1 48%;
            }

        .vital-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #333;
        }

        .vital-group {
            text-align: left;
        }

            .vital-group input,
            .vital-group select {
                padding: 10px;
                border: 1px solid #ccc;
                border-radius: 5px;
                font-size: 14px;
                color: #333;
                width: 100%;
                max-width: 400px;
                box-sizing: border-box;
                height: 40px;
                margin: 0;
            }

        .header-labels {
            text-align: left;
            margin-bottom: 20px;
            padding-left: 50px;
        }

            .header-labels label {
                display: block;
                margin-bottom: 10px;
                font-size: 18px;
                color: #333;
            }

        .form-card hr {
            margin: 20px 0;
        }

        .address-group {
            margin-bottom: 10px;
        }

            .address-group label {
                display: block;
                margin-bottom: 5px;
            }

            .address-group select {
                width: 100%;
                padding: 8px;
            }

        /* Style for the scrollable dropdown */
        .select2-container--default .select2-results {
            max-height: 150px; /* Adjust the height as needed */
            overflow-y: auto;
        }
    </style>
</head>
<body>
    <div class="container-fluid" id="grad1">
        <div class="row justify-content-center mt-0" style="width: contain;">
            <div class="text-center p-0 mt-3 mb-2">
                <div class="card px-0 pt-4 pb-0 mt-3 mb-3">
                    <h2><strong>Administer Medication</strong></h2>
                    <hr />
                    <div class="row-two-columns">
                        <div class="header-labels">
                            <label>Name: @ViewBag.PatientName</label>
                            <label>Surname: @ViewBag.PatientSurname</label>
                        </div>
                        <div class="header-labels">
                            <label>Ward: @ViewBag.PatientWard </label>
                            <label>Bed: @ViewBag.PatientBed</label>
                        </div>
                    </div>
                    <hr />
                    <div class="row">
                        <div class="col-md-12 mx-0">
                            <form id="msform" method="post" asp-action="AdministerMedication" asp-controller="Nurse">
                                <fieldset id="f-2">
                                    <div class="form-card">
                                        <h2 class="fs-title">View Prescription</h2>
                                        <div class="table-responsive">
                                            <table id="PreMedicationTable" class="display" style="width:100%">
                                                <thead>
                                                    <tr>
                                                        <th>Medicine</th>
                                                        <th>Prescribed Quantity</th>
                                                        <th>Instructions</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var medication in Model.AllPrescribedDispensed)
                                                    {
                                                        <tr>
                                                            <td>@medication.MedicationName</td>
                                                            <td>@medication.Quantity</td>
                                                            <td>@medication.Instructions</td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>

                                        <div class="form-group">
                                            <hr />
                                            <h4>Administer Medication</h4>
                                            <hr />
                                            <div class="row-two-columns">
                                                <div class="vital-group">
                                                    <label for="MedicineSelect">Choose Medicine</label>
                                                    <select class="select2" id="MedicineSelect" class="form-control">
                                                        <option value="" disabled selected>Choose Medicine</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <hr />
                                                <h4>Quantity</h4>
                                                <hr />
                                                <div class="row-two-columns">
                                                    <div class="vital-group">
                                                        <label for="Quantity">Enter Quantity</label>
                                                        <input type="number" id="QuantityInput" min="1" step="1" />
                                                    </div>
                                                </div>
                                                <br />
                                                <button type="button" id="addMedicationButton">Add Medication</button>
                                                <br />

                                                <!-- DataTable to display prescribed medications -->
                                                <div class="table-responsive">
                                                    <table id="PreMedTable" class="display" style="width:100%">
                                                        <thead>
                                                            <tr>
                                                                <th>Medicine</th>
                                                                <th>Quantity</th>
                                                                <th>Action</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            <!-- Rows will be dynamically added here -->
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>

                                            <button type="button" class="previous action-button-previous" onclick="window.location.href='@Url.Action("MedicationCollected", "Nurse", new { prescriptionID = ViewBag.PrescriptionID, name = ViewBag.PatientName, surname = ViewBag.PatientSurname, ward = ViewBag.PatientWard, bed = ViewBag.PatientBed, admittedPatientId = ViewBag.AdmittedPatientID, accountID = ViewBag.AccountID })'">Back</button>
                                            <input type="hidden" id="MedicationsData" name="MedicationsData" />
                                            <!-- Hidden Fields for PrescriptionID, AdmittedPatientID, and AccountID -->
                                            <input type="hidden" name="prescriptionID" value="@Model.PrescriptionID" />
                                            <input type="hidden" name="admittedPatientID" value="@ViewBag.AdmittedPatientID" />
                                            <input type="hidden" name="accountID" value="@ViewBag.AccountID" />

                                            <button name="submit" class="next action-button" type="submit">Submit</button>
                                        </div>

                                    </div>
                                </fieldset>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        $(document).ready(function () {
            // Initialize Select2
            $('.select2').select2({
                placeholder: 'Select an option',
                allowClear: true
            });

            // Initialize DataTable for displaying administered medications
            var table = $('#PreMedTable').DataTable();

            // Medication tracking object (medicationName -> administeredQuantity)
            var medicationTrack = {};

            // Function to get prescribed quantity from the #PreMedicationTable
            function getPrescribedQuantity(medicine) {
                let prescribedQuantity = 0;

                // Search for the medicine in the prescription table
                $('#PreMedicationTable tbody tr').each(function () {
                    const rowMedicine = $(this).find('td:first').text().trim();
                    if (rowMedicine === medicine) {
                        prescribedQuantity = parseInt($(this).find('td:eq(1)').text().trim(), 10) || 0;
                        return false; // Exit the loop
                    }
                });

                return prescribedQuantity;
            }

            function fetchAdministeredQuantity(admittedPatientId, medicationId) {
                return new Promise((resolve, reject) => {
                    $.ajax({
                        url: "/lookup/GetAdministeredQuantities",
                        type: "GET",
                        data: {
                            prescriptionId: @Model.PrescriptionID,
                            admittedPatientID: admittedPatientId
                        },
                        success: function (data) {
                            const match = data.find(item => item.medicationID === parseInt(medicationId, 10));
                            // Store the totalAdministered in medicationTrack
                            const totalAdministered = match ? match.totalAdministered : 0;
                            medicationTrack[medicationId] = { totalAdministered: totalAdministered, addedQuantity: 0 };
                            resolve(totalAdministered);
                        },
                        error: function (error) {
                            console.error("Error fetching administered quantity:", error);
                            reject(0);
                        }
                    });
                });
            }

            $('#addMedicationButton').on('click', async function () {
                const medicineID = $('#MedicineSelect').val(); // Get the Medication ID
                const medicine = $('#MedicineSelect option:selected').text(); // Get the Medication Name
                const quantity = parseInt($('#QuantityInput').val(), 10); // Administered quantity
                const admittedPatientId = @ViewBag.AdmittedPatientID; // Admitted patient ID

                if (medicine && quantity && !isNaN(quantity) && medicineID) {
                    // Fetch prescribed quantity
                    const prescribedQuantity = getPrescribedQuantity(medicine);

                    if (prescribedQuantity === 0) {
                        alert("Error: Unable to determine prescribed quantity for the selected medication.");
                        return;
                    }

                    try {
                        // Fetch the already administered quantity from the database
                        await fetchAdministeredQuantity(admittedPatientId, medicineID);

                        // Fetch the totalAdministered from medicationTrack
                        const totalAdministered = medicationTrack[medicineID].totalAdministered;

                        // Add the quantities from the PreMedTable (already administered in the session)
                        let currentTotalAdministered = totalAdministered;

                        // Add quantities that are already in the PreMedTable for this medication
                        $('#PreMedTable tbody tr').each(function () {
                            const rowMedicine = $(this).find('td:first').text().trim();
                            const rowQuantity = parseInt($(this).find('td:eq(1)').text().trim(), 10);

                            // If the medication in the row matches the selected medicine, add to the currentTotalAdministered
                            if (rowMedicine === medicine) {
                                currentTotalAdministered += rowQuantity;
                            }
                        });

                        // Ensure the total administered does not exceed the prescribed quantity
                        if ((currentTotalAdministered + quantity) > prescribedQuantity) {
                            alert(`Error: You cannot administer more than ${prescribedQuantity} units of ${medicine}. Already administered: ${currentTotalAdministered}.`);
                            return;
                        }

                        // Add the medication to the tracking object
                        medicationTrack[medicineID].addedQuantity += quantity;

                        // Add row to the DataTable
                        table.row.add([
                            medicine,
                            quantity,
                            `<button onclick="removeRow(this)">Remove</button>`
                        ]).draw(false);

                        // Store medicationID in row data
                        const lastRow = table.row(':last').node();
                        $(lastRow).data('medication-id', medicineID);

                        // Clear inputs
                        $('#MedicineSelect').val(null).trigger('change');
                        $('#QuantityInput').val('');
                    } catch (error) {
                        // Handle the error case
                        alert('Error fetching administered quantity.');
                    }
                } else {
                    alert('Please select both medicine and enter a valid quantity.');
                }
            });




            // Function to remove a row from the DataTable
            window.removeRow = function (button) {
                const row = $(button).parents('tr');
                const medicineName = row.find('td:first').text();
                const quantity = parseInt(row.find('td:eq(1)').text(), 10);

                // Decrease the administered quantity for the medication
                if (medicationTrack[medicineName]) {
                    medicationTrack[medicineName] -= quantity;
                }

                table.row(row).remove().draw();
            };

            // Fetch medications for the prescription
            const prescriptionId = @Model.PrescriptionID;

            $.ajax({
                url: "/lookup/GetAllMedicationsForPrescription",
                type: "GET",
                data: { prescriptionId: prescriptionId },
                success: function (data) {
                    $('#MedicineSelect').empty().append('<option value="" disabled selected>Choose Medicine</option>');

                    data.forEach(function (item) {
                        const opt = new Option(item.medicationName, item.medicationID);
                        $('#MedicineSelect').append(opt);
                    });
                },
                error: function (error) {
                    console.error("Error fetching medications:", error);
                }
            });

            // Modify the submit button to collect table data
            $('button[name="submit"]').on('click', function () {
                // Collect table data and serialize it into an array of objects
                var medications = [];
                $('#PreMedTable tbody tr').each(function () {
                    var medicationName = $(this).find('td:eq(0)').text();
                    var administeredQuantity = parseInt($(this).find('td:eq(1)').text(), 10);
                    var medicationID = $(this).data('medication-id'); // Retrieve MedicationID from the row data

                    medications.push({
                        MedicationName: medicationName,
                        AdministeredQuantity: administeredQuantity,
                        MedicationID: medicationID
                    });
                });

                // Convert the medications array to JSON and set it in the hidden input field
                $('#MedicationsData').val(JSON.stringify(medications));

                // Submit the form
                $('#msform').submit();
            });
        });




    </script>

</body>
</html>
